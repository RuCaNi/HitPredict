#
# HitPredict - Ein Projekt f√ºr 'Grundlagen und Methoden der Informatik f√ºr Wirtschaftswissenschaften' an der Universit√§t St.Gallen (2025)
# Autoren: Ruben Cardell, Adam Bisharat, Helena H√§u√üler, Colin Wirth
# ---
# HINWEIS: Das Herz des Projektes befindet sich in pages/1_üéµ_Song_bewerten.py
# ---
# ACHTUNG: Installation
# 1. Es m√ºssen alle Libraries in exakt der richtigen Version aus requirements.txt installiert werden
# 2. Die App ben√∂tigt Python 3.11
# 3. Die Essentia Modelldateien m√ºssen im gleichen Verzeichnis wie die Landingpage.py Datei sein
# 4. Es kann Fehler beim Ausf√ºhren geben, wenn die Packages mit einer falschen Numpy Version kompiliert werden
# !!! Wir empfehlen, die App auf https://hitpredict.streamlit.app/ anzuschauen !!!
#

# Importe
import streamlit as st
import pandas as pd


# Cache f√ºr schnelleres Laden beim Seitenwechsel
@st.cache_data(show_spinner=False)
def load_dataset():
    """
    L√§dt jede 5000ste Zeile und die Spaltennamen aus Song-Soulmate Datensatz.
    """
    # Zeilen werden √ºbersprungen (nicht angezeigt), wenn skiprows-Parameter True ist
    # i > 0: Index null (Header) soll nicht √ºbersprungen werden -> Namen der Spalten
    # i % 5000 != 0: √úberspringen, wenn i nicht ein Vielfaches von 5000 ist -> Nur jede 5000ste Zeile anzeigen
    df = pd.read_csv("spotify_data_similarity.csv", index_col=0, skiprows=lambda i: i > 0 and i % 5000 != 0)
    return df


# Streamlit Konfiguration
st.set_page_config(page_title="HitPredict üé∂", layout="wide", page_icon="favicon.png")
st.logo("Logo.png", size="large")


# Titel
st.title("üîç Deep-dive - √úber HitPredict")

st.markdown("""
**HitPredict** ist eine datengetriebene Applikation, die es K√ºnstlern und Produzenten erm√∂glicht, das **Erfolgspotenzial** 
eines Songs objektiv einzusch√§tzen ‚Äì noch bevor dieser offiziell ver√∂ffentlicht wird!  
Im Zentrum des Tools stehen moderne Methoden der **Audio- und Textanalyse** sowie **maschinelles Lernen** und **APIs**.

---
""")


# Abschnitt: Datensatz
st.subheader("üóÉÔ∏è Unser Datensatz")

st.markdown("""
Unsere Vorhersage basiert auf einem [Kaggle Datensatz](https://www.kaggle.com/datasets/amitanshjoshi/spotify-1million-tracks) 
von urspr√ºnglich √ºber **1.160.000 Songs**, die √ºber die [**Spotify Web API**](https://developer.spotify.com/documentation/web-api) 
abgerufen wurden.

Die Songs enthalten von Spotify berechnete Attribute, unter anderem
- **Popularity**: Beliebtheit des Songs, errechnet durch Aufrufe und Alter.
- **Year**: Jahr des Releases. Es sind ausschliesslich Songs von 2000-2023 enthalten.
- **Genre**: Genre des Songs. Alle Genres, die nicht sowohl von Essentia als auch der Spotify Web API erkannt werden, sind 'other'.
- **Danceability**: Tanzbarkeit basierend auf einer Kombination von Tempo, Rhythmus, Taktst√§rke und Regelm√§ssigkeit.
- **Energy**: Mass f√ºr Intensit√§t und Aktivit√§t. Typischerweise f√ºhlen sich energiegeladene Tracks schnell, laut und ger√§uschvoll an.
- **Key**: Tonart, in der sich der Track befindet. Verwendet Pitch Class notation.
- **Loudness**: Gesamtlautst√§rke eines Songs in Dezibel (dB).
- **Mode**: Modalit√§t (Dur oder Moll) eines Songs, also die Art der Tonleiter.
- **Speechiness**: Vorhandensein von gesprochenen W√∂rtern in einem Track.
- **Acousticness**: Konfidenzniveau das angibt, ob der Track rein akustisch ist.
- **Instrumentalness**: Zeigt an, ob ein Song keinen Gesang enth√§lt.
- **Valence**: Positivit√§t des Songs. Hohe Valenz klingt gl√ºcklich und euphorisch, w√§hrend niedrige Valenz eher traurig und w√ºtend ist.
- **Tempo**: Das gesch√§tzte Gesamttempo eines Tracks in Beats pro Minute (BPM).
- **Time signature**: Gesch√§tzte Taktart. Gibt an, wie viele Schl√§ge ein Takt hat.
- **Duration**: Dauer des Tracks in Millisekunden.

Um zus√§tzlich auch textbasierte Attribute zu verwenden, haben wir die **Lyrics** f√ºr alle 1.160.000 Songs √ºber die 
[**LRCLIB API**](https://lrclib.net/) abgerufen. F√ºr **560.000 Songs** war dies erfolgreich, alle anderen haben wir aussortiert.

Anhand der Lyrics konnten wir folgende **textbasierte Metriken** berechnen:
- **Repetition**: Wiederholungen basierend auf 3er N-Grams, also die Anzahl an identischen 3-Wort-Abschnitten.
- **Readability**: Lesbarkeit nach der Dale‚ÄìChall Formel. Mass f√ºr die Verst√§ndnisschwierigkeiten beim Lesen eines Textes.
- **Polarity**: Polarit√§t der Lyrics. Beschreibt positive oder negative Stimmung.
- **Subjectivity**: Subjektivit√§t misst den Anteil der pers√∂nlichen Meinung.
- **Explicitness**: Obsz√∂nit√§t oder anst√∂ssige Sprache in den Lyrics.

So entstand unser finaler Datensatz f√ºr das Machine Learning *(Auszug)*:
""")

# Visualisierung Datensatz
df = load_dataset()
st.dataframe(df)

st.divider()


# Abschnitt: Machine Learning Modell
st.subheader("üß† Machine Learning Modell")
st.markdown("""Um Machine Learning Modelle zu trainieren, haben wir zun√§chst einige Ausreisser entfernt, 
wie bspw. Songs mit einer Time signature von null. Ausserdem haben wir One-Hot Encoding f√ºr die Genres angewendet, 
damit diese als numerische Werte f√ºr das Modell lesbar sind. Zudem wurden alle Werte mit dem scikit-learn Standardscaler standardisiert.

- **X**: Alle Metriken exkl. Popularity
- **Y**: Popularity Score (0‚Äì100)

Folgende Machine Learning Modelle haben wir trainiert (teils mit Hyperparameter-Tuning):
- **Lineare Regression** (mit **Rigde** und **Lasso** Regularisation)
- **Random Forest**
- **XGBoost**
- **Neuronales Netzwerk**
""")

# Visualisierung ML Resultate
ml_results = pd.DataFrame({
    "Lineare Regression": ["12.34", "9.73"],
    "LinReg Ridge": ["12.25", "9.69"],
    "LinReg Lasso": ["12.25", "9.69"],
    "Random Forest": ["11.44", "8.99"],
    "**XGBoost**": ["**11.35**", "**8.91**"],
    "Neural Network": ["11.42", "9.04"],
    },
    index=["RMSE", "MAE"]  # RMSE = Root Mean Squared Error; MAE = Mean Absolute Error
    )
st.table(ml_results)  # Tabelle

st.markdown("Da XGBoost die besten Resultate zeigte, haben wir das Modell f√ºr HitPredict ausgesucht.")

st.divider()


# Abschnitt: Visualisierung Wichtigkeit / Genauigkeit
col1, col2 = st.columns(2)
with col1:
    st.subheader("‚ùó Wichtigkeit der Features")
    st.image("img/XGBoost Feature Importance.png")  # Graph

    st.markdown("""
    Anhand der **Feature-Importance** erkennt man, welche Metriken bei der Popularity-Vorhersage am wichtigsten sind.
    
    - Genre
    - Year
    - Instrumentalness
    - Danceability
    
    **Achtung**: Dies zeigt lediglich, wie stark die einzelnen Metriken ber√ºcksichtigt werden.
    √úber einen positiven/negativen Einfluss kann keine Aussage gemacht werden.
    """)

with col2:
    st.subheader("üéØ Genauigkeit unseres Modells")
    st.image("img/XGBoost Accuracy.png")  # Graph

    st.markdown("""
    Die **Genauigkeit** unseres Modells haben wir ebenfalls visualisiert.
    
    Hier erkennt man, dass das Modell **niedrige Werte √ºbersch√§tzt**, w√§hrend es **hohe Werte √ºbersch√§tzt**.
    Das Modell bewegt sich so im Zweifel weg von den Extremen, um hohe Fehler zu vermeiden.
    
    Zudem nimmt die **Streuung** zu, je h√∂her der tats√§chliche Popularity Score ist.
    Dies liegt daran, dass gerade einmal 3% der Songs einen Score √ºber 60 haben und es somit wenig Trainingsdaten f√ºr hohe Scores gibt.
    
    Der **strikt steigende Verlauf** l√§sst jedoch erkennen, dass das Modell bei der Vorhersage klar einen **Trend** identifizieren kann.
    """)

st.divider()


# Abschnitt: Audioanalyse
st.subheader("üìä Analyseprozess")

st.markdown("""
Sobald ein Nutzer eine **Audiodatei** ‚Äì im MP3-Format ‚Äì auf unserer Plattform hochl√§dt, extrahiert die Python Library 
**Essentia** alle oben genannten Metriken aus dem Audio.

[**Essentia**](https://essentia.upf.edu/essentia_python_tutorial.html) ist eine open-source C++ Library, 
die von der Universit√§t Pompeu Fabra (UPF) f√ºr die **Audioanalyse** entwickelt wurde.
F√ºr Essentia existieren Python-Bindings und eine Tensorflow-Erweiterung mit vortrainierten Machine Learning Modellen.
Essentia berechnet die Metriken wie folgt:
 
**Standard-Essentia**
- Duration, Tempo, Key, Mode, Loudness, Energy, Danceability und Time signature

**Tensorflow-Erweiterung**
- Genre, Acousticness, Instrumentalness, Speechiness und Valence


Anschliessend wird mit **OpenAI Whisper** ‚Äì das √ºber die [**Deepgram API**](https://developers.deepgram.com/docs/deepgram-whisper-cloud) 
l√§uft ‚Äì eine automatische Transkription der **Lyrics** durchgef√ºhrt.

Die textbasierten Metriken werden mit den selben Methoden berechnet, wie f√ºr den Datensatz zuvor.
- [**TextBlob**](https://textblob.readthedocs.io/en/dev/): Repetition, Polarity, Subjectivity
- [**Textstat**](https://textstat.org/): Readability
- [**profanity-check**](https://github.com/vzhou842/profanity-check): Explicitness

Nun erfolgt die Vorhersage des Popularity Scores anhand des trainierten XGBoost Modells.
""")

st.divider()


# Abschnitt: Ergebnisausgabe
st.subheader("üìà Ergebnisausgabe")

col1, col2 = st.columns([0.6,0.4])
with col1:
    st.markdown("""
    Nach der Analyse liefert HitPredict eine Popularit√§tssch√§tzung von **0 bis 100 Punkten**:
    
    - **< 30 Punkte** ‚Üí kein Hitpotenzial
    - **30‚Äì50 Punkte** (Top 40%) ‚Üí durchschnittliches Potenzial
    - **50‚Äì60 Punkte** (Top 9%) ‚Üí Wahrscheinlichkeit f√ºr einen Hit steigt deutlich
    - **60+ Punkte** (Top 3%) ‚Üí hohe Wahrscheinlichkeit f√ºr viralen Erfolg
    
    Ein **Netzdiagramm** zeigt anschliessend, welche Metriken verbessert werden k√∂nnen, 
    um die Erfolgschancen eines Songs zu steigern.
    """)

with col2:
    st.image("img/Popularity Score Distribution.png")  # Verteilung der Popularity-Scores im Datensatz

st.divider()


# Abschnitt: Song Soulmate
st.subheader("üë´ Song Soulmate")

st.markdown("""
Naheliegend w√§re doch auch, die berechneten Metriken mit jedem Song des Datensatzes zu **vergleichen**, 
um einen Song zu identifizieren, der dem hochgeladenen Audio am √§hnlichsten ist.
‚Äì Und genauso machen wir es!

Wir berechnen daf√ºr die **geometrische Distanz** im 44-dimensionalen Raum zwischen dem Vektor der standardisierten Metriken 
des hochgeladenen Audios und den jeweiligen Vektoren aller anderen Songs im Datensatz.
Der niedrigste Wert wird als **bestes Match** identifiziert.

Mittels einer Anfrage an die **Spotify Web API** wird die aktuelle Popularity des Matches abgerufen und zusammen 
mit einem abspielbaren Widget angezeigt.
""")

st.divider()


# Abschnitt: Unser Ziel
st.subheader("üéØ Unser Ziel")

st.markdown("""
Mit HitPredict bieten wir K√ºnstlerinnen und K√ºnstlern ein Tool, das datenbasiert kreative und gesch√§ftliche Entscheidungen unterst√ºtzt.  
Ob bei der Auswahl einer Single, der Einsch√§tzung von Marketingbudgets oder der Priorisierung von Albumtracks ‚Äì  
**HitPredict liefert eine fundierte Zweitmeinung auf Basis realer Musik- und Textdaten.**

#### HitPredict: *Know your hit before it‚Äôs heard.*
""")